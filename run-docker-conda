#!/bin/bash

# Default values for the script
IMAGE_NAME="$(whoami)/cuda-miniconda:latest"
CONTAINER_NAME=""  # Leave empty to let run-docker handle its default
MEMORY_LIMIT="" #Â Memory limit
VSCODE=0  # vscode mode
PROJECT_DIR="$(pwd)"  # Default to current directory
CONDA_ENV_DIR="/multiverse/storage/$(whoami)/conda_envs/"
DOCKER_ARGS=""
GPU_LIST=""  # Default to empty (no GPU restriction)
CPU_LIST=""  # Default to empty (no CPU restriction)
COMMAND="bash"  # Default command to run in the container
CONFIG_FILE=".runconfigs"  # Path to the default config file
GLOBAL_CONFIG_FILE="$HOME/.runconfigs"  # Path to the global config file

# First check if the config file exists in the current directory, otherwise fall back to the global config
if [[ -f ${CONFIG_FILE} ]]; then
    while IFS= read -r line; do
        line=$(echo "$line" | sed 's/#.*//') # Remove anything after #
        if [[ "$line" == docker_args:* ]]; then
            RUNCONFIGS_DOCKER_ARGS="${line#docker_args: }"
        fi
    done < "${CONFIG_FILE}"
elif [[ -f ${GLOBAL_CONFIG_FILE} ]]; then
    while IFS= read -r line; do
        line=$(echo "$line" | sed 's/#.*//') # Remove anything after #
        if [[ "$line" == docker_args:* ]]; then
            RUNCONFIGS_DOCKER_ARGS="${line#docker_args: }"
        fi
    done < "${GLOBAL_CONFIG_FILE}"
fi

# Help message
print_help() {
    echo "Usage: run-docker-conda [OPTIONS] <gpu-list> <cpu-list> <command>"
    echo ""
    echo "Run a Docker container with dynamic user and group setup using run-docker."
    echo ""
    echo "Options:"
    echo "  --image <image_name>       Specify the Docker image to use (default: cudrano/cuda-miniconda:latest)."
    echo "  --container_name <container_name>    Specify the name for the running container (default: run-docker's default)."
    echo "  --project <project_dir>    Path to the project directory to mount (default: current directory)."
    echo "  --conda-envs <envs_dir>    Path to the directory where conda environments are stored (default: /multiverse/storage/<username>/conda_envs/)."
    echo "  --docker-args <args>       Additional arguments to pass to Docker."
    echo "  --memory-limit <limit>     Specify the memory limit for the container (default: 32g)."
    echo "  --vscode                   Mounts vscode server folder in /vscode. To be used with vscode-enabled image."
    echo "  -h, --help                 Show this help message."
    echo ""
    echo "Positional Arguments:"
    echo "  <gpu-list>                 Comma-separated list of GPUs to use (empty for no GPU restriction)."
    echo "  <cpu-list>                 Comma-separated list of CPU cores to use (empty for no CPU restriction)."
    echo "  <command>                  Command to run inside the container (default: 'bash')."
    echo ""
    echo "Example:"
    echo "  run-docker-conda --project /path/to/project 0 0-2 bash"
    echo "  run-docker-conda --memory-limit 16g '' '' python script.py"
}

# Parse options
positional_args=()

while [[ $# -gt 0 ]]; do
    case $1 in
        --image)
            IMAGE_NAME="$2"
            shift 2
            ;;
        --container_name)
            CONTAINER_NAME="$2"
            shift 2
            ;;
        --project)
            PROJECT_DIR="$2"
            shift 2
            ;;
        --conda-envs)
            CONDA_ENV_DIR="$2"
            shift 2
            ;;
        --docker-args)
            DOCKER_ARGS+="$2 "
            shift 2
            ;;
        --memory-limit)
            MEMORY_LIMIT="$2"
            shift 2
            ;;
        --vscode)
            VSCODE=1
            shift 1
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        *)
            positional_args+=("$1")
            shift
            ;;
    esac
done

# Assign positional arguments in order
GPU_LIST="${positional_args[0]}"
CPU_LIST="${positional_args[1]}"
COMMAND="${positional_args[2]:-bash}"

# Ensure truly empty values are passed for GPU_LIST and CPU_LIST if they are empty
GPU_LIST="${GPU_LIST:-}"
CPU_LIST="${CPU_LIST:-}"

# Extract user and group info
USER_ID=$(id -u)
GROUP_ID=$(id -g)
USER_NAME=$(whoami)
USER_GROUPS=$(id -Gn | xargs -n1 getent group | awk -F: '{print $1":"$3}' | tr '\n' ',' | sed 's/,$//')

# Add additional Docker arguments
# Merge default Docker arguments and any provided via --docker-args
FINAL_DOCKER_ARGS="${DOCKER_ARGS} "
FINAL_DOCKER_ARGS+="-e USER_ID=${USER_ID} -e GROUP_ID=${GROUP_ID} "
FINAL_DOCKER_ARGS+="-e USER_NAME=${USER_NAME} -e GROUPS=${USER_GROUPS} "
FINAL_DOCKER_ARGS+="-v ${PROJECT_DIR}:/exp "
FINAL_DOCKER_ARGS+="-v ${CONDA_ENV_DIR}:/envs:cached "
FINAL_DOCKER_ARGS+="-m ${MEMORY_LIMIT:-32g} "
if [[ -n "${VSCODE}" ]]; then
    FINAL_DOCKER_ARGS+="-v /home/${USER_NAME}/.vscode-server:/vscode "
    IMAGE_NAME="$(whoami)/cuda-miniconda:vscode"
fi
FINAL_DOCKER_ARGS+="${RUNCONFIGS_DOCKER_ARGS}"

# Add container name if specified
if [[ -n "${CONTAINER_NAME}" ]]; then
    CONTAINER_NAME="--container_name ${CONTAINER_NAME} "
fi

# Call run-docker with all arguments
run-docker "${GPU_LIST}" "${CPU_LIST}" --root ${CONTAINER_NAME} --image_name "${IMAGE_NAME}" --docker_args "${FINAL_DOCKER_ARGS}" "${COMMAND}"
